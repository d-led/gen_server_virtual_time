name: CAF (C++) Code Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/actor_simulation/caf_generator.ex'
      - 'examples/caf_*/**'
      - 'scripts/generate_caf_examples.exs'
      - '.github/workflows/caf_validation.yml'
  pull_request:
    branches: [ main ]

jobs:
  validate-caf-examples:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        example: [caf_pubsub, caf_pipeline, caf_burst, caf_loadbalanced]

    steps:
    - uses: actions/checkout@v4

    - name: Install build tools
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install cmake
        fi

    - name: Install Conan
      uses: conan-io/setup-conan@v1

    - name: Configure Conan profile
      run: |
        conan profile detect --force

    - name: Install dependencies with Conan
      working-directory: examples/${{ matrix.example }}
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release

    - name: Configure with CMake
      working-directory: examples/${{ matrix.example }}/build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake

    - name: Build
      working-directory: examples/${{ matrix.example }}/build
      run: |
        cmake --build . --config Release

    - name: Run tests
      working-directory: examples/${{ matrix.example }}/build
      run: |
        ctest -C Release --output-on-failure

    - name: Run application (with timeout)
      working-directory: examples/${{ matrix.example }}/build
      shell: bash
      run: |
        # Cross-platform timeout: use GNU timeout on Linux, gtimeout on macOS (via coreutils), or fallback
        if command -v timeout &> /dev/null; then
          timeout 5 ./*_test --success || true
        elif command -v gtimeout &> /dev/null; then
          gtimeout 5 ./*_test --success || true
        else
          # Fallback: run in background with kill after timeout
          ./*_test --success & 
          PID=$!
          sleep 5
          kill $PID 2>/dev/null || true
          wait $PID 2>/dev/null || true
        fi

  regenerate-and-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.17'
        otp-version: '27'

    - name: Install Elixir dependencies
      run: mix deps.get

    - name: Regenerate CAF examples
      run: mix run scripts/generate_caf_examples.exs

    - name: Check for uncommitted changes
      run: |
        git diff --exit-code examples/caf_* || (echo "Generated files differ from committed files!" && exit 1)

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install Conan
      uses: conan-io/setup-conan@v1

    - name: Configure Conan profile
      run: |
        conan profile detect --force

    - name: Validate all regenerated examples
      run: |
        for example in examples/caf_*; do
          if [ -d "$example" ]; then
            echo "Validating $example..."
            (
              cd "$example" || exit 1
              mkdir -p build
              cd build || exit 1
              conan install .. --build=missing -s build_type=Release || exit 1
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake || exit 1
              cmake --build . --config Release || exit 1
              ctest -C Release --output-on-failure || exit 1
            ) || exit 1
          fi
        done

