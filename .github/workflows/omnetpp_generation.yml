name: OMNeT++ Code Generation Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'lib/actor_simulation/omnetpp_generator.ex'
      - 'examples/omnetpp_*/**'
      - 'scripts/generate_omnetpp_examples.exs'
      - '.github/workflows/omnetpp_generation.yml'
  pull_request:
    branches: [ main ]

jobs:
  test-generation:
    name: Test OMNeT++ Code Generation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Reduced matrix for faster CI - only test latest versions
        elixir: ['1.18']
        otp: ['27']
        # elixir: ['1.17', '1.18']
        # otp: ['26', '27']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.elixir }}-${{ matrix.otp }}-
      
      - name: Install dependencies
        run: mix deps.get
      
      - name: Compile
        run: mix compile --warnings-as-errors
      
      - name: Run generator tests
        run: mix test test/omnetpp_generator_test.exs --trace
        continue-on-error: true
      
      - name: Generate OMNeT++ examples
        run: mix run scripts/generate_omnetpp_examples.exs
      
      - name: Validate generated code
        run: mix run scripts/validate_omnetpp_output.exs
      
      - name: Check file counts
        run: |
          echo "Checking generated files..."
          
          # Check each example directory
          for dir in examples/omnetpp_*; do
            if [ -d "$dir" ]; then
              echo "üìÅ $dir:"
              echo "  NED files: $(find $dir -name '*.ned' | wc -l)"
              echo "  Headers:   $(find $dir -name '*.h' | wc -l)"
              echo "  Sources:   $(find $dir -name '*.cc' | wc -l)"
              echo "  CMake:     $([ -f $dir/CMakeLists.txt ] && echo '‚úì' || echo '‚úó')"
              echo "  Conan:     $([ -f $dir/conanfile.txt ] && echo '‚úì' || echo '‚úó')"
              echo "  INI:       $([ -f $dir/omnetpp.ini ] && echo '‚úì' || echo '‚úó')"
            fi
          done
      
      - name: Verify no timestamps in code
        run: |
          echo "Checking for timestamps in generated code..."
          
          # Search for date patterns in C++ and NED files
          if grep -r -E '[0-9]{4}-[0-9]{2}-[0-9]{2}' examples/omnetpp_*/*.{h,cc,ned} 2>/dev/null; then
            echo "‚ùå Found timestamps in generated files"
            exit 1
          else
            echo "‚úÖ No timestamps found"
          fi
      
      - name: Check C++ syntax validity
        run: |
          echo "Basic C++ syntax checks..."
          
          for file in examples/omnetpp_*/*.cc; do
            if [ -f "$file" ]; then
              # Check for required patterns
              if ! grep -q "Define_Module" "$file"; then
                echo "‚ùå Missing Define_Module in $file"
                exit 1
              fi
              
              module_name=$(basename "$file" .cc)
              if ! grep -q "void ${module_name}::initialize()" "$file"; then
                echo "‚ùå Missing initialize() in $file"
                exit 1
              fi
              
              if ! grep -q "void ${module_name}::handleMessage" "$file"; then
                echo "‚ùå Missing handleMessage() in $file"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All C++ files have required methods"
      
      - name: Validate NED syntax
        run: |
          echo "Validating NED file structure..."
          
          for file in examples/omnetpp_*/*.ned; do
            if [ -f "$file" ]; then
              if ! grep -q "simple " "$file"; then
                echo "‚ùå Missing simple module definitions in $file"
                exit 1
              fi
              
              if ! grep -q "network " "$file"; then
                echo "‚ùå Missing network definition in $file"
                exit 1
              fi
              
              if ! grep -q "submodules:" "$file"; then
                echo "‚ùå Missing submodules section in $file"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All NED files have valid structure"
      
      - name: Check CMake configuration
        run: |
          echo "Validating CMakeLists.txt files..."
          
          for dir in examples/omnetpp_*; do
            cmake_file="$dir/CMakeLists.txt"
            if [ -f "$cmake_file" ]; then
              if ! grep -q "cmake_minimum_required" "$cmake_file"; then
                echo "‚ùå Missing cmake_minimum_required in $cmake_file"
                exit 1
              fi
              
              if ! grep -q "OMNETPP_ROOT" "$cmake_file"; then
                echo "‚ùå Missing OMNETPP_ROOT configuration in $cmake_file"
                exit 1
              fi
              
              if ! grep -q "add_executable" "$cmake_file"; then
                echo "‚ùå Missing add_executable in $cmake_file"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All CMakeLists.txt files valid"
      
      - name: Archive generated code
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: omnetpp-generated-code-elixir-${{ matrix.elixir }}-otp-${{ matrix.otp }}
          path: |
            examples/omnetpp_*/
            !examples/omnetpp_*/*.o
            !examples/omnetpp_*/build/
          retention-days: 7
      
      - name: Generate validation report
        if: always()
        run: |
          echo "# OMNeT++ Generation Report" > validation_report.md
          echo "" >> validation_report.md
          echo "## Configuration" >> validation_report.md
          echo "- Elixir: ${{ matrix.elixir }}" >> validation_report.md
          echo "- OTP: ${{ matrix.otp }}" >> validation_report.md
          echo "" >> validation_report.md
          echo "## Generated Projects" >> validation_report.md
          
          for dir in examples/omnetpp_*; do
            if [ -d "$dir" ]; then
              project=$(basename "$dir")
              echo "### $project" >> validation_report.md
              echo "- Files: $(find $dir -type f | wc -l)" >> validation_report.md
              echo "- C++ sources: $(find $dir -name '*.cc' | wc -l)" >> validation_report.md
              echo "- Headers: $(find $dir -name '*.h' | wc -l)" >> validation_report.md
              echo "" >> validation_report.md
            fi
          done
      
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-elixir-${{ matrix.elixir }}-otp-${{ matrix.otp }}
          path: validation_report.md
          retention-days: 30

  verify-consistency:
    name: Verify Generated Code Consistency
    runs-on: ubuntu-latest
    needs: test-generation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Compare generated code across versions
        run: |
          echo "Comparing generated code consistency..."
          
          # This ensures that different Elixir/OTP versions produce identical output
          first_artifact=$(ls -d omnetpp-generated-code-* | head -1)
          
          for artifact in omnetpp-generated-code-*; do
            if [ "$artifact" != "$first_artifact" ]; then
              echo "Comparing $first_artifact vs $artifact"
              
              # Compare file counts
              count1=$(find "$first_artifact" -name '*.cc' | wc -l)
              count2=$(find "$artifact" -name '*.cc' | wc -l)
              
              if [ "$count1" != "$count2" ]; then
                echo "‚ùå File count mismatch: $count1 vs $count2"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Generated code is consistent across versions"

  compile-omnetpp-examples:
    name: Compile & Test OMNeT++ Examples
    # Note: macOS builds are disabled due to system Python install restrictions with opp_env
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Reduced matrix for faster CI - only test one example
        example: [omnetpp_burst]
        # example: [omnetpp_pubsub, omnetpp_pipeline, omnetpp_burst, omnetpp_loadbalanced]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install OMNeT++ dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential gcc g++ bison flex perl python3 python3-pip python3-venv python3-dev \
          libxml2-dev zlib1g-dev cmake

    - name: Cache OMNeT++
      id: cache-omnetpp
      uses: actions/cache@v4
      with:
        path: ~/omnetpp-6.2.0
        key: omnetpp-6.2.0-${{ runner.os }}-v2

    - name: Download and build OMNeT++ 6.2
      if: steps.cache-omnetpp.outputs.cache-hit != 'true'
      run: |
        cd ~
        wget https://github.com/omnetpp/omnetpp/releases/download/omnetpp-6.2.0/omnetpp-6.2.0-linux-x86_64.tgz
        tar xzf omnetpp-6.2.0-linux-x86_64.tgz
        cd omnetpp-6.2.0
        export PATH=$HOME/omnetpp-6.2.0/bin:$PATH
        . setenv
        # Create virtual environment and install Python dependencies
        python3 -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r python/requirements.txt
        # Configure: command-line only, no GUI
        ./configure WITH_QTENV=no WITH_OSG=no WITH_OSGEARTH=no MODE=release
        # Build
        make MODE=release -j$(nproc)

    - name: Build OMNeT++ project
      working-directory: examples/${{ matrix.example }}
      run: |
        export PATH=$HOME/omnetpp-6.2.0/bin:$PATH
        export OMNETPP_ROOT=$HOME/omnetpp-6.2.0
        source ~/omnetpp-6.2.0/setenv
        if [ -d ~/omnetpp-6.2.0/.venv ]; then source ~/omnetpp-6.2.0/.venv/bin/activate; fi
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release

    - name: Run simulation
      working-directory: examples/${{ matrix.example }}/build
      shell: bash
      run: |
        export PATH=$HOME/omnetpp-6.2.0/bin:$PATH
        export OMNETPP_ROOT=$HOME/omnetpp-6.2.0
        source ~/omnetpp-6.2.0/setenv
        if [ -d ~/omnetpp-6.2.0/.venv ]; then source ~/omnetpp-6.2.0/.venv/bin/activate; fi
        # Find the executable (it's named NetworkName.omnetpp.linux)
        EXECUTABLE=$(find . -name "*.omnetpp.linux" -type f | head -1)
        if [ -z "$EXECUTABLE" ]; then
          echo "ERROR: Could not find OMNeT++ executable"
          ls -la
          exit 1
        fi
        echo "Found executable: $EXECUTABLE"
        # Run short simulation with timeout
        timeout 10 $EXECUTABLE -u Cmdenv -c General || true

