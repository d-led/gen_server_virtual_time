name: Pony Code Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/actor_simulation/pony_generator.ex'
      - 'examples/pony_*/**'
      - 'scripts/generate_pony_examples.exs'
      - '.github/workflows/pony_validation.yml'
  pull_request:
    branches: [ main ]

jobs:
  validate-pony-examples:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        example: [pony_pubsub, pony_pipeline, pony_burst, pony_loadbalanced]

    steps:
    - uses: actions/checkout@v3

    - name: Install Pony toolchain (Ubuntu)
      run: |
        sudo apt-get update && sudo apt-get install -y curl build-essential
        # Download pre-built ponyup binary from Cloudsmith (more reliable than init script)
        curl -L https://dl.cloudsmith.io/public/ponylang/releases/raw/versions/latest/ponyup-x86-64-unknown-linux.tar.gz -o ponyup.tgz
        mkdir -p $HOME/.local/share/ponyup/bin/
        mkdir -p /tmp/ponyup
        tar xzf ponyup.tgz -C /tmp/ponyup
        mv /tmp/ponyup/*/bin/* $HOME/.local/share/ponyup/bin/
        echo "x86_64-linux-ubuntu22.04" > $HOME/.local/share/ponyup/.platform
        export PATH="$HOME/.local/share/ponyup/bin:$PATH"
        echo "$HOME/.local/share/ponyup/bin" >> $GITHUB_PATH
        ponyup default "x86_64-linux-ubuntu22.04"
        ponyup version

    - name: Update Pony compiler and Corral
      run: |
        # Ensure ponyup is in PATH
        export PATH="$HOME/.local/share/ponyup/bin:$PATH"
        ponyup update ponyc release
        ponyup update corral release
        # Add bin directories to PATH
        echo "$HOME/.local/share/ponyup/ponyc/release/bin" >> $GITHUB_PATH
        echo "$HOME/.local/share/ponyup/corral/release/bin" >> $GITHUB_PATH

    - name: Fetch dependencies
      working-directory: examples/${{ matrix.example }}
      run: |
        corral fetch || true

    - name: Build Pony project
      working-directory: examples/${{ matrix.example }}
      run: |
        ponyc .

    - name: Build Pony tests
      working-directory: examples/${{ matrix.example }}
      run: |
        ponyc test

    - name: Run PonyTest tests
      working-directory: examples/${{ matrix.example }}
      run: |
        ./test --sequential

    - name: Run application (with timeout)
      working-directory: examples/${{ matrix.example }}
      shell: bash
      run: |
        # Cross-platform timeout: use GNU timeout on Linux, gtimeout on macOS (via coreutils), or fallback
        if command -v timeout &> /dev/null; then
          timeout 5 ./${{ matrix.example }} || true
        elif command -v gtimeout &> /dev/null; then
          gtimeout 5 ./${{ matrix.example }} || true
        else
          # Fallback: run in background with kill after timeout
          ./${{ matrix.example }} & 
          PID=$!
          sleep 5
          kill $PID 2>/dev/null || true
          wait $PID 2>/dev/null || true
        fi

