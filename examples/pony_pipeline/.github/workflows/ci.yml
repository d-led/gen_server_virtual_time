name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install Pony
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y ponyup
          ponyup update ponyc release
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install ponyup
          ponyup update ponyc release
        fi
      shell: bash

    - name: Install Corral
      run: |
        ponyup update corral release

    - name: Cache Corral packages
      uses: actions/cache@v3
      with:
        path: |
          _corral
          .corral
        key: ${{ runner.os }}-corral-${{ hashFiles('**/corral.json') }}
        restore-keys: |
          ${{ runner.os }}-corral-

    - name: Build
      run: |
        corral fetch
        ponyc .
        DIR_NAME=$(basename "$PWD")
        OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
        PROJECT_NAME=$(grep -o '"name": *"[^"]*"' corral.json | head -1 | sed 's/"name": *"\([^"]*\)"/\1/')
        BINARY="${PROJECT_NAME}.pony.${OS_NAME}"
        mv "$DIR_NAME" "$BINARY" 2>/dev/null || true

    - name: Build and Run tests
      run: |
        ponyc test
        if [ -f ./test1 ]; then timeout 1 ./test1 || true; elif [ -f ./test ]; then timeout 1 ./test || true; fi

    - name: Run Demo Application
      run: |
        # Determine binary name: {project}.pony.{os}
        OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
        PROJECT_NAME=$(grep -o '"name": *"[^"]*"' corral.json | head -1 | sed 's/"name": *"\([^"]*\)"/\1/')
        BINARY="${PROJECT_NAME}.pony.${OS_NAME}"
        timeout 5 ./"${BINARY}" || true
