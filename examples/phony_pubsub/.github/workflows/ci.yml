name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build
      run: |
        OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
        if [ -f "go.mod" ]; then
          PROJECT_NAME=$(grep -o 'module [^ ]*' go.mod | head -1 | awk '{print $2}' | xargs basename)
        else
          PROJECT_NAME="pubsub_actors"
        fi
        BINARY="${PROJECT_NAME}.phony.${OS_NAME}"
        go build -o "$BINARY" .

    - name: Test
      run: go test -v ./...

    - name: Run Demo Application
      shell: bash
      run: |
        # Determine binary name: {project}.phony.{os}
        OS_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
        if [ -f "go.mod" ]; then
          PROJECT_NAME=$(grep -o 'module [^ ]*' go.mod | head -1 | awk '{print $2}' | xargs basename)
        else
          PROJECT_NAME="pubsub_actors"
        fi
        BINARY="${PROJECT_NAME}.phony.${OS_NAME}"
        timeout 5 ./"${BINARY}" || true
